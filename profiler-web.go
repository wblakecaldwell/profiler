// Code generated by go-bindata.
// sources:
// profiler-web/info-off.html
// profiler-web/info.html
// DO NOT EDIT!

package profiler

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infoOffHtml = []byte(`<html>
	<head>
		<title>Memory tracking disabled</title>
	</head>
	<body>
		<p>Memory profiling is turned off.</p>
		<p><a href="/profiler/start">Turn it on</a></p>
	</body>
</html>
`)

func infoOffHtmlBytes() ([]byte, error) {
	return _infoOffHtml, nil
}

func infoOffHtml() (*asset, error) {
	bytes, err := infoOffHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info-off.html", size: 191, mode: os.FileMode(438), modTime: time.Unix(1469487099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _infoHtml = []byte(`<html>

<head>
	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
	<!--
	Display an Google chart showing a service's memory usage.
	-->
	<script type="text/javascript" src="https://www.google.com/jsapi"></script>
	<script type="text/javascript">
		google.load("visualization", "1", {packages:["corechart"]});

		// Fetch the Heap Memory Stats JSON every 1 second, and draw to the chart
		function fetchHeapMemStats() {
		    $.ajax({
				type: 'GET',
				url: 'info',
				dataType: 'json',
				success: function (profilingInfo) {
					// draw the chart
					drawHeapChart(profilingInfo.HeapInfo);
					
					// draw the table of extra info
					var extraInfo = profilingInfo.ExtraServiceInfo
					if(extraInfo != null) {
						$('#extra_info').html('')
						$('#extra_info').append('<table cellspacing="10" style="border:1px solid #ddd;" cellspacing="0" cellpadding="2" width="500">')
						for (var propertyName in extraInfo) {
							if (extraInfo.hasOwnProperty(propertyName)) {
								$('#extra_info').append('<tr><td style="padding: 10px; width: 250px; border-left:1px solid #ddd; border-right:1px solid #ddd; border-bottom:1px solid #ddd;">' + propertyName + '</td><td style="padding: 10px; width: 250px; border-right:1px solid #ddd; border-bottom:1px solid #ddd;">' + extraInfo[propertyName] + '</td></tr>')
							}
						}
						$('#extra_info').append('</table>')
					}
					var date = new Date(profilingInfo.UpTime/1e6);
					$('#up_time').text(formatUpTime(date));

				},
				complete: function (data) {
					// Schedule the next poll
					setTimeout(fetchHeapMemStats, 1000);
				}
		    });
		}

		// fetch the heap memory stats in 1 second
		setTimeout(fetchHeapMemStats, 1000);


		function formatUpTime(date){
			var hh = date.getUTCHours();
			var mm = date.getUTCMinutes();
			var ss = date.getSeconds();
			if (hh < 10) {hh = "0"+hh;}
			if (mm < 10) {mm = "0"+mm;}
			if (ss < 10) {ss = "0"+ss;}
			return hh + ":" + mm + ":" + ss;
		}

	function drawHeapChart(heapData) {
		// build the chart data
		chartData = [];
		var numStats = heapData.length;
		chartData[chartData.length] = ['Time', 'Sys (MB)', 'HeapSys (MB)', 'HeapAlloc (MB)', 'HeapIdle (MB)', 'HeapReleased (MB)'];
		for (var i = 0; i < numStats; i++) {
			chartData[chartData.length] = [heapData[i].TimeMsAgo/1000, heapData[i].SysKb/1000.0, heapData[i].HeapSysKb/1000.0, heapData[i].HeapAllocKb/1000.0, heapData[i].HeapIdleKb/1000.0, heapData[i].HeapReleasedKb/1000.0];
		}

        var data = google.visualization.arrayToDataTable(chartData);

        var options = {
          title: 'Heap Memory Usage',
          curveType: 'function',
          hAxis: {title: 'seconds from now', viewWindow: {min: -60, max:0}},
          vAxis: {title: 'Memory Usage', format: "#,###MB", viewWindow: {min: 0}}
        };

		var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
		chart.draw(data, options);
      }
    </script>
</head>

<body align="center" style="font-family: Arial">
	<div style="width:100%; text-align: right">
		<a href="/profiler/stop">Stop Profiling</a>
	</div>
	<div>
		<div id="chart_div" style="width: 1000px; height: 600px; margin: 0 auto;"></div>
	</div>
	<div style="width:135px; margin: 0 auto;">
		Up time: <span style="font-weight: bold;" id="up_time"></span>
	</div>
	<div>
		<h3 style="font-size: 15px;font-weight: bold;">Extra Service Info</h3>
		<div id="extra_info" style="width:500px; margin: 0 auto;"></div>
	</div>
</body>

</html>`)

func infoHtmlBytes() ([]byte, error) {
	return _infoHtml, nil
}

func infoHtml() (*asset, error) {
	bytes, err := infoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info.html", size: 3613, mode: os.FileMode(438), modTime: time.Unix(1469492937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"info-off.html": infoOffHtml,
	"info.html": infoHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"info-off.html": &bintree{infoOffHtml, map[string]*bintree{}},
	"info.html": &bintree{infoHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

